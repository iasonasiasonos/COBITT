@using dihweb.Models

@{
    ViewData["Title"] = "Devices Process Status";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Devices Process Status</h2>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Home")">Dashboard</a>
            </li>
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Orders")">Orders</a>
            </li>
            <li class="active breadcrumb-item">
                <strong>Devices Process Status</strong>
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-12">
            <div class="ibox ">
                <div class="ibox-title">
                    <h5>Devices Process Status</h5>
                </div>
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-md-12">
                            @(Html.DevExtreme().DataGrid<dihweb.Models.MachineOrderStatus>()
                            .ID("gridContainer")
                            .DataSource(ds => ds.Mvc()
                                .Controller("OrdersControllerData")
                                .LoadAction("GetMachineOrderStatus")
                                .InsertAction("Post")
                                .UpdateAction("UpdateMachineStatus")
                                .Key("MachineOrderStatusId")
                                .LoadParams(new { OrderId = ViewBag.OrdersId })
                            )
                            .Columns(columns =>
                            {

                                columns.AddFor(m => m.Orders.Name).AllowEditing(false);
                                columns.AddFor(m => m.Devices.DeviceName).AllowEditing(false);
                                columns.AddFor(m => m.Status).AllowEditing(true).ShowEditorAlways(false).TrueText("Success").FalseText("Fail");


                                columns.Add()
                                        .Type(GridCommandColumnType.Buttons)
                                        .Width(120)
                                        .Buttons(b =>
                                        {
                                            b.Add().Name(GridColumnButtonName.Edit);
                                        });

                            })
                            .Editing(e => e
                            .AllowAdding(true)
                            .AllowUpdating(true)
                            .AllowDeleting(false)
                            .UseIcons(true)
                            )
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .ShowBorders(true)
                            .ShowColumnHeaders(true)
                            .ShowColumnLines(true)
                            .ShowRowLines(true)
                            .RowAlternationEnabled(true)
                            .Paging(paging =>
                            {
                                paging.Enabled(true);
                                paging.PageSize(10);
                            })
                            .Pager(pager =>
                            {
                                pager.ShowPageSizeSelector(true);
                                pager.AllowedPageSizes(new[] { 10, 20, 50 });
                                pager.ShowInfo(true);
                            })
                            .SearchPanel(e =>e
                            .Visible(true)
                            .Width(240)
                            .Placeholder("Search...")
                            ))
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
